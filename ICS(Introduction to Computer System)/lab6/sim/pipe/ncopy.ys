#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Lin Qilong  519021910380
#
# Describe how and why you modified the baseline code.
# 1. replace irmovq & addq with iaddq
# 2. implement 10-way loop unrolling
# 3. use switch table to handle elements left
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-10, %rdx
	jl HandleLeft

Loop:	
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos1:
	iaddq $1, %rax		# count++

Npos1:
	mrmovq 8(%rdi), %r10	# read val from src...
	rmmovq %r10, 8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos2		# if so, goto Npos2:
	iaddq $1, %rax		# count++

Npos2:
	mrmovq 16(%rdi), %r10	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos3		# if so, goto Npos3:
	iaddq $1, %rax		# count++

Npos3:
	mrmovq 24(%rdi), %r10	# read val from src...
	rmmovq %r10, 24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos4		# if so, goto Npos4:
	iaddq $1, %rax		# count++

Npos4:
	mrmovq 32(%rdi), %r10	# read val from src...
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos5		# if so, goto Npos5:
	iaddq $1, %rax		# count++

Npos5:
	mrmovq 40(%rdi), %r10	# read val from src...
	rmmovq %r10, 40(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos6		# if so, goto Npos6:
	iaddq $1, %rax		# count++

Npos6:
	mrmovq 48(%rdi), %r10	# read val from src...
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos7		# if so, goto Npos7:
	iaddq $1, %rax		# count++

Npos7:
	mrmovq 56(%rdi), %r10	# read val from src...
	rmmovq %r10, 56(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos8		# if so, goto Npos8:
	iaddq $1, %rax		# count++

Npos8:
	mrmovq 64(%rdi), %r10	# read val from src...
	rmmovq %r10, 64(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos9		# if so, goto Npos9:
	iaddq $1, %rax		# count++

Npos9:
	mrmovq 72(%rdi), %r10	# read val from src...
	rmmovq %r10, 72(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++

Npos:
	iaddq $80, %rdi		# src+=10
	iaddq $80, %rsi		# dst+=10
	iaddq $-10, %rdx
	jge Loop

HandleLeft:
	addq %rdx, %rdx
	addq %rdx, %rdx
	addq %rdx, %rdx
	mrmovq Table(%rdx), %r10
	pushq %r10
	ret

L9:
	mrmovq 64(%rdi), %r10	# read val from src...
	rmmovq %r10, 64(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle L8		# if so, goto L8:
	iaddq $1, %rax		# count++

L8:
	mrmovq 56(%rdi), %r10	# read val from src...
	rmmovq %r10, 56(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle L7		# if so, goto L7:
	iaddq $1, %rax		# count++

L7:
	mrmovq 48(%rdi), %r10	# read val from src...
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle L6		# if so, goto L6:
	iaddq $1, %rax		# count++

L6:
	mrmovq 40(%rdi), %r10	# read val from src...
	rmmovq %r10, 40(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle L5		# if so, goto L5:
	iaddq $1, %rax		# count++

L5:
	mrmovq 32(%rdi), %r10	# read val from src...
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle L4		# if so, goto L4:
	iaddq $1, %rax		# count++

L4:
	mrmovq 24(%rdi), %r10	# read val from src...
	rmmovq %r10, 24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle L3		# if so, goto L3:
	iaddq $1, %rax		# count++

L3:
	mrmovq 16(%rdi), %r10	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle L2		# if so, goto L2:
	iaddq $1, %rax		# count++

L2:
	mrmovq 8(%rdi), %r10	# read val from src...
	rmmovq %r10, 8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle L1		# if so, goto L1:
	iaddq $1, %rax		# count++

L1:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Done:
	iaddq $1, %rax		# count++
	ret

	.align 8
		.quad Done
		.quad L1
		.quad L2
		.quad L3
		.quad L4
		.quad L5
		.quad L6
		.quad L7
		.quad L8
		.quad L9
Table:	

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
